!!python/object:core.execution.Execution
execution: LLM_RAG_DATA_PREPARE_VECTORSTORE
list:
- !!python/object:core.task.Task
  input: '{"capacityMapXlsx": "{self.get_rdir()}/capacitymap/\u80fd\u529b\u5730\u56fe-without-comments.xlsx",
    "output_folder": "/Users/i335607/LoriProject/ai-assistant-gemini/rag-data/new"}'
  skipped: false
  type: INITIAL_PARAMS
- !!python/object:core.task.Task
  input: '{"file_path": "{self.get_data(\"capacityMapXlsx\")}", "skip_first": "yes",
    "data_key": "capacity_map", "end_at": "8", "sheet_index": 0, "content": "{json.dump(self.get_data(\"capacity_group_by\"))}"}'
  skipped: false
  type: READ_EXCEL
- !!python/object:core.task.Task
  input: '{"file_path": "{self.get_data(\"capacityMapXlsx\")}", "skip_first": "yes",
    "data_key": "capacity_map_info", "end_at": "6", "sheet_index": 1}'
  skipped: false
  type: READ_EXCEL
- !!python/object:core.task.Task
  input: '{"file_path": "{self.get_data(\"capacityMapXlsx\")}", "skip_first": "yes",
    "data_key": "capacity_map_2_supplier", "end_at": "4", "sheet_index": 2}'
  skipped: false
  type: READ_EXCEL
- !!python/object:core.task.Task
  input: '{"file_path": "{self.get_data(\"capacityMapXlsx\")}", "skip_first": "yes",
    "data_key": "capacity_value_2_supplier", "end_at": "7", "sheet_index": 3}'
  skipped: false
  type: READ_EXCEL
- !!python/object:core.task.Task
  input: '{"given_collection": "capacity_value_2_supplier", "masking_columnnum": "5",
    "masking_func": "return ''SN_'' + str(colnum) + str(rownum).rjust(4, ''0'')",
    "masking_dict_name": "masking_dict_suppiler_name", "masking_dict_inverted": "Yes"}'
  skipped: false
  type: DATA_MASKING
- !!python/object:core.task.Task
  input: '{"given_collection": "capacity_value_2_supplier", "masking_columnnum": "4",
    "masking_func": "return ''SID_'' + str(colnum) + str(rownum).rjust(4, ''0'')",
    "masking_dict_inverted": "Yes", "masking_dict_name": "masking_dict_suppiler_code"}'
  skipped: false
  type: DATA_MASKING
- !!python/object:core.task.Task
  input: '{"c_one_name": "capacity_value_2_supplier", "c_two_name": "capacity_map_info",
    "c_result_name": "capacity_map_semifinal", "lambda_finder": "rowc1[2] == rowc2[2]",
    "lambda_merge_matched": "[rowc1[0],rowc1[1],rowc2[3],rowc2[4],rowc1[3],rowc1[4],rowc1[5],rowc1[6]]"}'
  skipped: false
  type: COLLECTION_MERGE
- !!python/object:core.task.Task
  input: '{"c_one_name": "capacity_map_semifinal", "c_two_name": "capacity_map", "c_result_name":
    "capacity_map_final", "lambda_finder": "rowc1[0] == rowc2[0]", "lambda_merge_matched":
    "[rowc2[2],rowc2[3],rowc1[1],rowc1[2],rowc1[3],rowc1[4],rowc1[5],rowc1[6],rowc1[7]]"}'
  skipped: false
  type: COLLECTION_MERGE
- !!python/object:core.task.Task
  input: '{"given_collection": "capacity_map_final", "group_by_func": "return  ''\u4f9b\u5e94\u5546\u540d\u79f0:
    '' + row[7] + '',  \u4f9b\u5e94\u5546\u7f16\u7801\u4e3a'' + row[6]", "mapping_func":
    "return ''\u54c1\u7c7b\u7f16\u7801\u4e3a \"''+ row[0] +''\" \u54c1\u7c7b\u540d\u79f0\u4e3a\"''
    + row[1] +''\" \u4e00\u7ea7\u80fd\u529b\u4e3a\"'' +row[3]+''\" \u4e8c\u7ea7\u80fd\u529b\u4e3a\"''
    +row[4]+''\" \u4e09\u7ea7\u80fd\u529b\u4e3a\"'' +row[5] + ''\" \u7684\u5f97\u5206\u4e3a
    \"'' +row[8] +''\"''", "target_dict_key": "capacity_map_rag_data", "collect_func":
    "return key +''  \u7684\u80fd\u529b\u4fe1\u606f\u4e3a '' + ''; ''.join(rows)"}'
  skipped: false
  type: DATA_GROUPBY
- !!python/object:core.task.Task
  input: '{"file_path": "{self.get_ddir()}/capacity_map_final.xlsx", "value_key":
    "capacity_map_final", "data_key": "capacity_map_final_path"}'
  skipped: false
  type: WRITE_TO_EXCEL
- !!python/object:core.task.Task
  input: '{"file_path": "{self.get_ddir()}/capacity_map_rag_data.json", "content":
    "{json.dumps(self.get_data(\"capacity_map_rag_data\"), ensure_ascii=False)}",
    "data_key": "capacity_map_rag_data_path"}'
  skipped: false
  type: WRITE_TO_FILE
- !!python/object:core.task.Task
  input: '{"file_path": "", "file_path_key": "capacity_map_rag_data_path", "timeout":
    10}'
  skipped: false
  type: OPEN_FILE
- !!python/object:core.task.Task
  input: '{"title": "\u4e3a AI-RAG \u51c6\u5907\u6570\u636e", "msg": "{self.get_data(\"capacity_map\")}
    \\n\\n {self.get_data(\"capacity_map_info\")} \\n\\n {self.get_data(\"capacity_map_2_supplier\")}
    \\n\\n {self.get_data(\"capacity_value_2_supplier\")}"}'
  skipped: false
  type: SHOW_RESULT
loops: []
