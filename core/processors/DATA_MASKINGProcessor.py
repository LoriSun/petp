import logging
from core.processor import Processor
from utils.CodeExplainerUtil import CodeExplainerUtil


class DATA_MASKINGProcessor(Processor):
    TPL: str = '{"given_collection":"", "masking_func":"return \'Supplier-\' + str(colnum) + str(rownum) ", "masking_columnnum":"0"}'

    DESC: str = f''' 

        [given_collection] of data_chain as input list, [masking_columnnum] represent the column(zero-based) of list, 
        do data masking [masking_func] .

        :param mask_dict - is the dict of masking data, key is the column, value is generated by masking function.
        :param row - is row data associated with [given_collection]
        :param rownum - is row number of the row data.        
        :param colnum - is masking_columnnum.        

        {TPL}

    '''

    def get_category(self) -> str:
        return super().CATE_DATA_PROCESSING

    def process(self):
        masking_dict = {}

        given_collection = self.get_data(self.get_param('given_collection'))
        masking_func_body = self.get_param('masking_func')
        masking_columnnum = int(self.get_param('masking_columnnum'))

        masking_func = CodeExplainerUtil.create_and_execute_func('DATA_MASKINGProcessor_masking',
                                                                 '(masking_dict, row, rownum, colnum)',
                                                                 masking_func_body)

        for rownum, row in enumerate(given_collection):
            masking_column_content = row[masking_columnnum]

            if masking_column_content not in masking_dict:
                masking_dict[masking_column_content] = masking_func(masking_dict, row, rownum, masking_columnnum)
                logging.info(f'"{masking_column_content}" -> {str(masking_dict[masking_column_content])}')

            row[masking_columnnum] = masking_dict[masking_column_content]

        masking_dict.clear()