import logging
from core.processor import Processor
from utils.CodeExplainerUtil import CodeExplainerUtil


class DATA_MULTI_MASKINGProcessor(Processor):
    TPL: str = '{"given_collection":"", "content_clean_func":"return content", "masking_func":"return \'SJB-\' + str(colnum) + str(rownum) ", "masking_columns":"0|>1|>2|>3", "masking_dict_name":"", "masking_dict_inverted":"Yes"}'

    DESC: str = f''' 

        [given_collection] of data_chain as input list, [masking_columns] represent the list of columns(zero-based), do data masking [masking_func].
        original data cleaned by [content_clean_func] before masking.

        :param mask_dict - is the dict of masking data, key is the column, value is generated by masking function.
        :param row - is row data associated with [given_collection]
        :param rownum - is row number of the row data.        
        :param colnum - is masking_columnnum.        

        {TPL}

    '''

    def get_category(self) -> str:
        return super().CATE_DATA_PROCESSING

    def process(self):
        masking_dict = {}

        given_collection = self.get_data(self.get_param('given_collection'))
        masking_dict_inverted = True if "yes" == str(self.get_param('masking_dict_inverted')).lower() else False
        masking_dict_name = self.get_param('masking_dict_name')
        masking_func_body = self.get_param('masking_func')
        content_clean_func = self.get_param('content_clean_func')
        masking_columns = self.get_param('masking_columns').split(self.SEPARATOR)

        masking_func = CodeExplainerUtil.create_and_execute_func('DATA_MULTI_MASKINGProcessor_masking',
                                                                 '(masking_dict, row, rownum, colnum)',
                                                                 masking_func_body)

        content_clean_func = CodeExplainerUtil.create_and_execute_func('DATA_MULTI_MASKINGProcessor_clean',
                                                                       '(content)',
                                                                       content_clean_func)

        for rownum, row in enumerate(given_collection):

            for masking_columnnum_str in masking_columns:

                masking_columnnum = int(masking_columnnum_str)

                masking_column_content = content_clean_func(row[masking_columnnum])

                if (masking_columnnum_str not in masking_dict):
                    masking_dict[masking_columnnum_str] = {}

                if masking_column_content not in masking_dict[masking_columnnum_str]:
                    masking_dict[masking_columnnum_str][masking_column_content] = masking_func(
                        masking_dict[masking_columnnum_str], row, rownum, masking_columnnum)

                    logging.info(
                        f'"{masking_column_content}" -> {str(masking_dict[masking_columnnum_str][masking_column_content])}')

                row[masking_columnnum] = masking_dict[masking_columnnum_str][masking_column_content]

        if masking_dict_name:
            if masking_dict_inverted:
                masking_dict = {k: {iv: ik for ik, iv in v.items()}
                                for k, v in masking_dict.items()}
            self.populate_data(masking_dict_name, masking_dict)
        else:
            masking_dict.clear()
