import logging
from core.processor import Processor
from utils.CodeExplainerUtil import CodeExplainerUtil


class DATA_GROUPBYProcessor(Processor):
    TPL: str = '{"given_collection":"", "group_by_func":"return row[0] ", "mapping_func":"return row","collect_func":"return key + str(rows)", "target_dict_key":"dict_group_by"}'

    DESC: str = f''' 

        [given_collection] of data_chain as input list, [group_by_func] is function to group by, [mapping_func] is function to map the group by result. 
        
        {{
            "string generated by group_by_func" : [ row generated by mapping_func, ...]
        }}        

        {TPL}

    '''

    def get_category(self) -> str:
        return super().CATE_DATA_PROCESSING

    def process(self):
        group_by_dict = {}

        given_collection = self.get_data(self.get_param('given_collection'))
        group_by_func = self.get_param('group_by_func')
        mapping_func = self.get_param('mapping_func')
        collect_func = self.get_param('collect_func')
        target_dict_key = self.expression2str(self.get_param('target_dict_key'))

        group_by_func = CodeExplainerUtil.create_and_execute_func('DATA_GROUPBYProcessor_group_by_func','(row)', group_by_func)
        mapping_func = CodeExplainerUtil.create_and_execute_func('DATA_GROUPBYProcessor_mapping_func', '(row)', mapping_func)
        collect_func = CodeExplainerUtil.create_and_execute_func('DATA_GROUPBYProcessor_collect_func', '(key, rows)', collect_func) if collect_func else None

        for rownum, row in enumerate(given_collection):
            group_by_key = group_by_func(row)
            mapping_func_result = mapping_func(row)

            if group_by_key not in group_by_dict:
                group_by_dict[group_by_key] = []

            group_by_dict[group_by_key].append(mapping_func_result)

        if collect_func:
            group_by_dict = {key : collect_func(key, rows) for key, rows in group_by_dict.items()}

        logging.debug(f'"{target_dict_key}" size: {len(group_by_dict)} : {str(group_by_dict)}')

        self.populate_data(target_dict_key, group_by_dict)